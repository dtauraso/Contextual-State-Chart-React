const insertName = (names: any, name: string[], stateId: Number): any => {
  // console.log({ names, name, stateId });
  // save trie node as a state
  // extra strings are added to the end of the state name if there is a match

  if (name.length === 0) {
    // console.log("base case");
    if ("id" in names) {
      const sortedKeysNoId = Object.keys(names)
        .filter((key) => key !== "id")
        .sort();
      // console.log({ sortedKeysNoId });
      if (sortedKeysNoId.length === 0) {
        return {
          tree: {
            ...names,
            "!": { id: stateId },
          },
          updatedName: ["!"],
        };
      }
      const lastKey = sortedKeysNoId[sortedKeysNoId.length - 1];
      const lastKeyCharCode = lastKey.charCodeAt(0);
      const nextKeyCharCode = lastKeyCharCode + 1;
      const nextKey = String.fromCharCode(nextKeyCharCode);
      // console.log({ lastKey, lastKeyCharCode, nextKey });

      if (nextKeyCharCode < 126) {
        return {
          tree: {
            ...names,
            [nextKey]: { id: stateId },
          },
          updatedName: [nextKey],
        };
      } else {
        // traversing the tree of autogenerated context names case
        const { tree, updatedName } = insertName(names[lastKey], [], stateId);

        return {
          tree: {
            ...names,
            [lastKey]: tree,
          },
          updatedName: [lastKey, ...updatedName],
        };
      }
    }
    return {
      tree: {
        ...names,
        id: stateId,
      },
      updatedName: [],
    };
  } else if (Object.keys(names).length === 0) {
    const { tree, updatedName } = insertName(
      {},
      name.slice(1, name.length),
      stateId
    );
    return {
      tree: {
        ...names,
        [name[0]]: tree,
      },
      updatedName: [name[0], ...updatedName],
    };
  } else if (name[0] in names) {
    // console.log("first name is in names");
    const { tree, updatedName } = insertName(
      names[name[0]],
      name.slice(1, name.length),
      stateId
    );
    return {
      tree: {
        ...names,
        [name[0]]: tree,
      },
      updatedName: [name[0], ...updatedName],
    };
  } else {
    // console.log("no name is in names");
    // console.log({ x });
    // build up trie
    const { tree, updatedName } = insertName(
      {},
      name.slice(1, name.length),
      stateId
    );
    return {
      tree: {
        ...names,
        [name[0]]: tree,
      },
      updatedName: [name[0], ...updatedName],
    };
  }
};

export { insertName };
